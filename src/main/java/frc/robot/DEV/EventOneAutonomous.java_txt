
    /** Auton working
    // 1. Load the path from path planner ("path name", velocity in m/s, acceleration in m/s)
    PathPlannerTrajectory m_path = PathPlanner.loadPath("Straight", 8, 5);

    // 2. Defining PID Controllers for tracking trajectory
    PIDController xController = new PIDController(Constants.kPXController, 0, 0);
    PIDController yController = new PIDController(Constants.kPYController, 0, 0);
    ProfiledPIDController thetaController = new ProfiledPIDController(Constants.kPThetaController, 0, 0, Constants.kThetaControllerConstraints);
    thetaController.enableContinuousInput(-Math.PI, Math.PI);

    // 3. Command to follow path from PathPlanner
    PPSwerveControllerCommand swerveControllerCommand = new PPSwerveControllerCommand(
      m_path, 
      m_drivetrainSubsystem::getPose, 
      Constants.m_kinematics, 
      xController, 
      yController, 
      thetaController, 
      m_drivetrainSubsystem::setModuleStates, 
      m_drivetrainSubsystem);
    

    // 4. Actual command sequence, run everything in order
    return new SequentialCommandGroup(
      new SequentialCommandGroup(
        // Runs Launch Motors withTimeout of 0.75 seconds to get up to speed of high hoop launch sequence
        // First attempt was 0.35, 0.40
        new LauncherSpeed(launcher, 0.30, 0.35).withTimeout(0.75), 
          new SequentialCommandGroup(
            //runs Launcher & Index motors to launch ball out to score high hoop
            new LauncherSpeed(launcher, 0.30, 0.35).withTimeout(0.25).alongWith( // First attempt was 0.35, 40
            new IndexSpeed(indexMotors, 0.5).withTimeout(0.25)),
                new ParallelCommandGroup (
                  // Runs Launcher, Intake, Index and Drive robot all at once to grab second ball
                  // Runs all 3 Launcher, Intake & Index motors withTimout of 5 seconds.
                  // Also make robot drive path from step 1
                  
                  // First attempt was 0.36, 0.42
                  new LauncherSpeed(launcher, 0.40, 0.45).withTimeout(5), 
                  new IntakeSpeed(intakeMotor, 0.5).withTimeout(5),
                  new IndexSpeed(indexMotors, 0.5).withTimeout(5),
                  new InstantCommand(() //Move this command out of Parallel group if this breaks things
                    -> m_drivetrainSubsystem.resetOdometry(m_path.getInitialPose())),
                    swerveControllerCommand).andThen(
                    //end of command - stop robot
                    new InstantCommand(() 
                        -> m_drivetrainSubsystem.stop())))
      ));
    */

    // Auton simple
// Create config for trajectory
TrajectoryConfig config =
new TrajectoryConfig(
        Drivetrain.MAX_VELOCITY_METERS_PER_SECOND,
        Drivetrain.MAX_ACCELERATION_METERS_SECOND_SQUARED)
    // Add kinematics to ensure max speed is actually obeyed
    .setKinematics(Constants.m_kinematics);
// An example trajectory to follow.  All units in meters.
Trajectory m_path =
TrajectoryGenerator.generateTrajectory(
// Start at the origin facing the +X direction
new Pose2d(0, 0, new Rotation2d(0)),
// Pass through these two interior waypoints, making an 's' curve path
List.of(new Translation2d(1, 0), new Translation2d(2, -1)),
// End 3 meters straight ahead of where we started, facing forward
new Pose2d(3, 0, new Rotation2d(0)),
config);

var thetaController =
new ProfiledPIDController(
Constants.kPThetaController, 0, 0, Constants.kThetaControllerConstraints);
thetaController.enableContinuousInput(-Math.PI, Math.PI);

SwerveControllerCommand swerveControllerCommand =
new SwerveControllerCommand(
m_path,
m_drivetrain::getPose, // Functional interface to feed supplier
Constants.m_kinematics,

// Position controllers
new PIDController(Constants.kPXController, 0, 0),
new PIDController(Constants.kPYController, 0, 0),
thetaController,
m_drivetrain::setModuleStates,
m_drivetrain);

// Reset odometry to the starting pose of the trajectory.
m_drivetrain.resetOdometry(m_path.getInitialPose());

// Run path following command, then stop at the end.
// ORIGINAL return swerveControllerCommand.andThen(() -> m_drivetrain.drive(0, 0, 0, false));
return swerveControllerCommand.andThen(() -> m_drivetrain.drive(new ChassisSpeeds(0.0, 0.0, 0.0)));
