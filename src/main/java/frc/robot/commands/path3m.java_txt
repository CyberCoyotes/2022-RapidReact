// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.commands.auton;
import frc.robot.Constants;
import frc.robot.commands.IndexSpeed;
import frc.robot.commands.IntakeSpeed;
import frc.robot.commands.LauncherSpeed;
import frc.robot.subsystems.Drivetrain;
import frc.robot.subsystems.Intake;
import frc.robot.subsystems.Index;
import frc.robot.subsystems.Launcher;

import com.pathplanner.lib.PathPlanner;
import com.pathplanner.lib.PathPlannerTrajectory;
import com.pathplanner.lib.commands.PPSwerveControllerCommand;

import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.math.controller.ProfiledPIDController;
import edu.wpi.first.math.trajectory.Trajectory;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.ParallelCommandGroup;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import edu.wpi.first.wpilibj2.command.SwerveControllerCommand;

/**
 * Should run the robot forward
*/ 
<<<<<<< HEAD:src/main/java/frc/robot/commands/auton/AutonShortDrive_2.java_txt
public class AutonShortDrive_2 extends SequentialCommandGroup {
    private final Drivetrain m_drivetrain;


    public AutonShortDrive_2(Drivetrain m_drivetrain) {
      Trajectory m_path = PathPlanner.loadPath("Straight", 8, 2);
=======
public class path3m extends PathPlanner {
    // private final Drivetrain m_drivetrain;
>>>>>>> dev:src/main/java/frc/robot/commands/auton/path3m.java_txt
    

    public path3m(Drivetrain drivetrain) {
      // Drives forward 4m theoretical; actual is about 3m (5.88, 4.5) to (1.88, 4.50)
      // Lead programmer for FRC Raptors says super is best way to inherit call files
      // Also says to not put CommandGroupds within Execute files 
      final PathPlannerTrajectory m_path = PathPlanner.loadPath("Straight", 8, 2);
      public static PathPlannerTrajectory loadPath("Straight", double maxVel, double maxAccel, boolean reversed);
  } // end class